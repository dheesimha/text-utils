{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","id","onClick","toggleMode","htmlFor","modeText","TextForm","useState","text","setText","heading","value","rows","onChange","event","target","style","backgroundColor","color","newText","toUpperCase","showAlert","toLowerCase","split","length","Math","ceil","defaultProps","aboutText","Alert","alert","role","word","lower","charAt","slice","capitalize","msg","App","setMode","setModeText","setAlert","message","setTimeout","document","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.6307b340.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n// import { Link } from \"react-router-dom\";\r\nexport default function Navbar(props) {\r\n  return (\r\n    <nav\r\n      className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}\r\n    >\r\n      <div className=\"container-fluid\">\r\n        <a className=\"navbar-brand\" href=\"#\">\r\n          {/* <Link className=\"navbar-brand\" to=\"/\"> */}\r\n          {props.title}\r\n        </a>\r\n        <button\r\n          className=\"navbar-toggler\"\r\n          type=\"button\"\r\n          data-bs-toggle=\"collapse\"\r\n          data-bs-target=\"#navbarSupportedContent\"\r\n          aria-controls=\"navbarSupportedContent\"\r\n          aria-expanded=\"false\"\r\n          aria-label=\"Toggle navigation\"\r\n        >\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n          <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n            <li className=\"nav-item\">\r\n              <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">\r\n                Home\r\n              </a>\r\n              {/* <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">\r\n                Home\r\n              </Link> */}\r\n            </li>\r\n            {/* <li className=\"nav-item\">\r\n              <Link className=\"nav-link\" to=\"/about\">\r\n                {props.aboutText}\r\n              </Link>\r\n            </li> */}\r\n          </ul>\r\n          {/* <form className=\"d-flex\">\r\n            <input\r\n              className=\"form-control me-2\"\r\n              type=\"search\"\r\n              placeholder=\"Search\"\r\n              aria-label=\"Search\"\r\n            />\r\n            <button className=\"btn btn-outline-success\" type=\"submit\">\r\n              Search\r\n            </button>\r\n          </form> */}\r\n\r\n          <div\r\n            className={`form-check form-switch text-${\r\n              props.mode === \"light\" ? \"dark\" : \"light\"\r\n            }`}\r\n          >\r\n            <input\r\n              className=\"form-check-input\"\r\n              type=\"checkbox\"\r\n              id=\"flexSwitchCheckDefault\"\r\n              onClick={props.toggleMode}\r\n            />\r\n            <label\r\n              className=\"form-check-label\"\r\n              htmlFor=\"flexSwitchCheckDefault\"\r\n            >\r\n              {props.modeText}\r\n            </label>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </nav>\r\n  );\r\n}\r\n\r\nNavbar.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  aboutText: PropTypes.string,\r\n};\r\n\r\nNavbar.defaultProps = {\r\n  title: \"Set a title here\",\r\n  aboutText: \"Set an about us over here\",\r\n};\r\n","import React, { useState } from \"react\";\r\n\r\nexport default function TextForm(props) {\r\n  const handleUpClick = () => {\r\n    // console.log(\"Uppercase was clicked \");\r\n    let newText = text.toUpperCase();\r\n    setText(newText);\r\n    props.showAlert(\"Converted to uppercase !\", \"success\");\r\n  };\r\n\r\n  const handleLowClick = () => {\r\n    let newText = text.toLowerCase();\r\n    setText(newText);\r\n    props.showAlert(\"Converted to lowercase !\", \"success\");\r\n  };\r\n\r\n  const handleClear = () => {\r\n    setText(\"\");\r\n    props.showAlert(\"Text cleared !\", \"success\");\r\n  };\r\n\r\n  const handleOnChange = (event) => {\r\n    // console.log(\"On change\");\r\n    setText(event.target.value);\r\n  };\r\n  const [text, setText] = useState(\"\");\r\n  return (\r\n    <>\r\n      <div className=\"container\">\r\n        <h1>{props.heading}</h1>\r\n        <div className=\"mb-3\">\r\n          <textarea\r\n            className=\"form-control\"\r\n            value={text}\r\n            id=\"myBox\"\r\n            rows=\"8\"\r\n            onChange={handleOnChange}\r\n            style={{\r\n              backgroundColor: props.mode === \"dark\" ? \"black\" : \"white\",\r\n              color: props.mode === \"dark\" ? \"white\" : \"black\",\r\n            }}\r\n          ></textarea>\r\n        </div>\r\n\r\n        <button className=\"btn btn-primary\" onClick={handleUpClick}>\r\n          Convert to Uppercase\r\n        </button>\r\n\r\n        <button className=\"btn btn-primary mx-2\" onClick={handleLowClick}>\r\n          Convert to lowercase\r\n        </button>\r\n\r\n        <button className=\"btn btn-danger mx-2\" onClick={handleClear}>\r\n          Clear text\r\n        </button>\r\n      </div>\r\n\r\n      <div className=\"container my-3\">\r\n        <h2>Your text summary</h2>\r\n        <p>\r\n          <strong>{text.split(\" \").length}</strong> words and{\" \"}\r\n          <strong>{text.length} </strong>\r\n          characters\r\n        </p>\r\n        <p>\r\n          <strong>{Math.ceil(text.split(\" \").length * 0.008)}</strong> minutes\r\n          read\r\n        </p>\r\n        <h2>Preview </h2>\r\n        <p>\r\n          {text.length > 0\r\n            ? text\r\n            : \"Enter something in the text box above to preview it here\"}\r\n        </p>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nfunction Alert(props) {\r\n  const capitalize = (word) => {\r\n    const lower = word.toLowerCase();\r\n    return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n  };\r\n  return (\r\n    props.alert && (\r\n      <div\r\n        className={`alert alert-${props.alert.type} alert-dismissible fade show`}\r\n        role=\"alert\"\r\n      >\r\n        <strong>{capitalize(props.alert.type)}</strong> : {props.alert.msg}\r\n      </div>\r\n    )\r\n  );\r\n}\r\n\r\nexport default Alert;\r\n","import \"./App.css\";\nimport About from \"./components/About\";\nimport Navbar from \"./components/Navbar\";\nimport TextForm from \"./components/TextForm\";\nimport { useState } from \"react\";\nimport Alert from \"./components/Alert\";\n// import { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\n\nfunction App() {\n  const [mode, setMode] = useState(\"light\");\n  const [modeText, setModeText] = useState(\"Enable DarkMode\");\n  const [alert, setAlert] = useState(null);\n  const showAlert = (message, type) => {\n    setAlert({\n      msg: message,\n      type: type,\n    });\n\n    setTimeout(() => {\n      setAlert(null);\n    }, 1500);\n  };\n  const toggleMode = () => {\n    if (mode === \"light\") {\n      setMode(\"dark\");\n      setModeText(\"Enable LightMode\");\n      document.body.style.backgroundColor = \"black\";\n      document.body.style.color = \"white\";\n      showAlert(\"Dark Mode has been enabled\", \"success\");\n      document.title = \"TextUtils - DarkMode\";\n    } else {\n      setMode(\"light\");\n      setModeText(\"Enable DarkMode\");\n      document.body.style.backgroundColor = \"white\";\n      document.body.style.color = \"black\";\n      showAlert(\"Light Mode has been enabled\", \"success\");\n      document.title = \"TextUtils - LightMode\";\n    }\n  };\n\n  return (\n    <>\n      {/* <Router> */}\n      <Navbar\n        title=\"TextUtils\"\n        aboutText=\"About Us\"\n        mode={mode}\n        toggleMode={toggleMode}\n        modeText={modeText}\n      />\n\n      <Alert alert={alert} />\n      <div className=\"container my-3\">\n        {/* <Switch>\n            <Route exact path=\"/about\">\n              <About />\n            </Route> */}\n        {/* <Route exact path=\"/\"> */}\n        <TextForm\n          heading=\"Enter the text to analyze below\"\n          mode={mode}\n          showAlert={showAlert}\n        />\n        {/* </Route> */}\n        {/* </Switch> */}\n      </div>\n      {/* </Router> */}\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}